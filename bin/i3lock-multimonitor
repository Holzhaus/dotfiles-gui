#!/bin/bash
CACHE_DIR="${HOME}/.cache/i3lock"

prepare_lockscreen() {
    local BACKGROUND_IMAGE="$1"
    local OVERLAY_IMAGE="$2"

    # Get the current XRANDR configuration
    XRANDR="$(xrandr -q)"
    if ! [ -z "$OVERLAY_IMAGE" ]; then
        CHECKSUM="$(cat "${BACKGROUND_IMAGE}" "${OVERLAY_IMAGE}" <(printf '%s' "${XRANDR}") | md5sum -)"
    else
        CHECKSUM="$(cat "${BACKGROUND_IMAGE}" <(printf '%s' "${XRANDR}") | md5sum -)"
    fi
    local PREPARED_IMAGE="${CACHE_DIR}/${CHECKSUM%  *}.png"

    # We do not have a cached lockscreen image for this configuration, create a new one
    if ! [ -e "${PREPARED_IMAGE}" ]; then
        printf '%s does not exist, creating...\n' "${PREPARED_IMAGE}" >&2
        IMAGE_WIDTH=0
        IMAGE_HEIGHT=0
        IM_ARGS=""
        TEMP_DIR="$(mktemp -t -d "i3lock.XXXXXXXXXX")"
        trap 'rm -rf "${TEMP_DIR}"' EXIT

        if [ -e "${OVERLAY_IMAGE}" ]; then
            printf 'Creating base image with overlay, creating...\n' "${PREPARED_IMAGE}" >&2
            BASE_IMAGE="${TEMP_DIR}/base.png"
            convert "${BACKGROUND_IMAGE}" -resize 1920x1080^ -gravity center -extent 1920x1080 "${OVERLAY_IMAGE}" -gravity center  -composite "${BASE_IMAGE}"
        else
            printf 'Using background image as base image...\n' "${PREPARED_IMAGE}" >&2
            BASE_IMAGE="${BACKGROUND_IMAGE}"
        fi

        while read -r LINE
        do
            if [[ "$LINE" =~ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) ]]; then
                SCREEN_WIDTH=${BASH_REMATCH[1]}
                SCREEN_HEIGHT=${BASH_REMATCH[2]}
                SCREEN_X=${BASH_REMATCH[3]}
                SCREEN_Y=${BASH_REMATCH[4]}
                printf 'Found active screen: %s\n' "${BASH_REMATCH[0]}" >&2

                TEMP_IMG="${TEMP_DIR}/${SCREEN_WIDTH}x${SCREEN_HEIGHT}.png"
                if ! [ -e "${TEMP_IMG}" ]
                then
                    convert "${BASE_IMAGE}" -resize "${SCREEN_WIDTH}X${SCREEN_HEIGHT}^" -gravity center -crop "${SCREEN_WIDTH}X${SCREEN_HEIGHT}+0+0" +repage "${TEMP_IMG}" || {
                        SCREEN_WIDTH=0
                        SCREEN_HEIGHT=0
                        break
                    }
                fi

                (( IMAGE_WIDTH < (SCREEN_WIDTH+SCREEN_X) )) && IMAGE_WIDTH=$(( SCREEN_WIDTH + SCREEN_X ))
                (( IMAGE_HEIGHT < (SCREEN_HEIGHT+SCREEN_Y) )) && IMAGE_HEIGHT=$(( SCREEN_HEIGHT + SCREEN_Y ))

                IM_ARGS="${IM_ARGS} ${TEMP_IMG} -geometry +${SCREEN_X}+${SCREEN_Y} -composite"
            fi
        done <<< "$(printf '%s' "${XRANDR}")"

        if (( IMAGE_WIDTH > 0 )) && (( IMAGE_WIDTH > 0 )); then
            TEMP_IMG="${TEMP_DIR}/${IMAGE_WIDTH}x${IMAGE_HEIGHT}-final.png"
            convert -size "${IMAGE_WIDTH}x${IMAGE_HEIGHT}" "xc:black" "${TEMP_IMG}"
            convert "${TEMP_IMG}" ${IM_ARGS} "${TEMP_IMG}"
            mv "${TEMP_IMG}" "${PREPARED_IMAGE}"
        fi
    fi

    printf '%s' "${PREPARED_IMAGE}"
}

if [ "$1" == "-p" ]; then
    PREPARE=1
    shift
fi

BACKGROUND_IMAGE="$1"
OVERLAY_IMAGE="$2"

if ! [ -d "${CACHE_DIR}" ]; then
    mkdir -p "${CACHE_DIR}"
fi

if [ -n "${PREPARE}" ] && [ "${PREPARE}" -ne 0 ]; then
    if ! [ -e "${BACKGROUND_IMAGE}" ]; then
        printf 'No such file or directory: %s\n' "${BACKGROUND_IMAGE}" >&2
        exit 1
    fi

    if [ -d "${BACKGROUND_IMAGE}" ]; then
        printf 'Preparing lockscreens in directory %s...\n' "${BACKGROUND_IMAGE}" >&2
        find "${BACKGROUND_IMAGE}/" -maxdepth 1 -type f \( -iname "*.jpg" -or -iname "*.png" \) -print0 | while IFS= read -r -d $'\0' image
        do
            prepare_lockscreen "$image" "$OVERLAY_IMAGE" >/dev/null
        done
    else
        printf 'Preparing lockscreen at %s...\n' "${BACKGROUND_IMAGE}" >&2
        prepare_lockscreen "$BACKGROUND_IMAGE" "$OVERLAY_IMAGE" >/dev/null
    fi

    printf 'Lockscreen preparation done.\n' >&2
    exit 0
fi

if ! [ -e "${BACKGROUND_IMAGE}" ]; then
    printf 'Error: Image "%s" not found, continuing without image...\n' "${BACKGROUND_IMAGE}" >&2
else
    notify-send -u low "Locking Screen..." "Please wait while the screenlock is prepared."

    # If BACKGROUND_IMAGE is a directory, select a random JPG/PNG file from it
    if [ -d "${BACKGROUND_IMAGE}" ]; then
        BACKGROUND_IMAGE="$(find "${BACKGROUND_IMAGE}/" -maxdepth 1 -type f \( -iname "*.jpg" -or -iname "*.png" \) | shuf -n 1)"
    fi

    PREPARED_IMAGE=$(prepare_lockscreen "$BACKGROUND_IMAGE" "$OVERLAY_IMAGE")
    if ! [ -e "${PREPARED_IMAGE}" ]; then
        printf 'Warning: Image processing failed, using original image.\n' >&2
        printf "\n\n%s\n%s\n\n" "$BASE_IMAGE" "$BACKGROUND_IMAGE"
        [ -e "${BASE_IMAGE}" ] && PREPARED_IMAGE="${BASE_IMAGE}" || PREPARED_IMAGE="${BACKGROUND_IMAGE}"
    fi
fi

# Finally lock the screen
printf 'Locking screen...\n'  >&2
[ -e "$PREPARED_IMAGE" ] && IMAGE_ARGS=(-i "${PREPARED_IMAGE}") || IMAGE_ARGS=()
if [[ -e /dev/fd/${XSS_SLEEP_LOCK_FD:--1} ]]; then
    kill_i3lock() {
        pkill --exact --euid $EUID "$@" i3lock
    }
    trap kill_i3lock TERM INT
    # we have to make sure the locker does not inherit a copy of the lock fd
    i3lock "${IMAGE_ARGS[@]}" "$@" {XSS_SLEEP_LOCK_FD}<&-
    # now close our fd (only remaining copy) to indicate we're ready to sleep
    exec {XSS_SLEEP_LOCK_FD}<&-
    while kill_i3lock -0; do
        sleep 0.5
    done
else
    trap 'kill %%' TERM INT
    i3lock --nofork "${IMAGE_ARGS[@]}" "$@" &
    wait
fi
